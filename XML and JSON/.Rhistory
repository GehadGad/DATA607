col = "aquamarine1", ylim = c(0,10)
# Connect to database
con <- dbConnect(RMySQL::MySQL(), dbname = 'star_wars', host = 'localhost', port = 3306, user = 'root', password = keyring::key_get("star_wars", "root"))
# Create the query for all data from the ranking table and get the results of the query
sql = "SELECT * FROM rankings"
ranking_table <- dbGetQuery(con, sql)
# Convert missing ranking data into zeros
ranking_table$ranking[is.na(ranking_table$ranking)] <- 0
sql = "SELECT * FROM movies"
movieid_table <- dbGetQuery(con, sql)
# Get averages
sql = "SELECT movieName, AVG(ranking)
FROM rankings
INNER JOIN movies
ON rankings.movieid = movies.movieid
GROUP BY movieName"
res <- dbGetQuery(con,sql)
names(res) <- c("movieName","ranking")
# Normalize the rankings
res$ranking <- (-1.125 * res$ranking) + 11.125
# Create barplot of rankings
barplot(res$ranking, names.arg = 1:9, main = "Star Wars Rankings",
sub = "Perfect score = 10", xlab = "Movie", ylab = "Ranking",
col = "aquamarine1", ylim = c(0,10))
# Connect to database
con <- dbConnect(RMySQL::MySQL(), dbname = 'star_wars', host = 'localhost', port = 3306, user = 'root', password = keyring::key_get("star_wars", "root"))
# Create the query for all data from the ranking table and get the results of the query
sql = "SELECT * FROM rankings"
ranking_table <- dbGetQuery(con, sql)
# Convert missing ranking data into zeros
ranking_table$ranking[is.na(ranking_table$ranking)] <- 0
sql = "SELECT * FROM movies"
movieid_table <- dbGetQuery(con, sql)
# Get averages
sql = "SELECT movieName, AVG(ranking)
FROM rankings
INNER JOIN movies
ON rankings.movieid = movies.movieid
GROUP BY movieName"
res <- dbGetQuery(con,sql)
names(res) <- c("movieName","ranking")
# Normalize the rankings
res$ranking <- (-1.125 * res$ranking) + 11.125
# Create barplot of rankings
barplot(res$ranking, names.arg = 1:9, main = "Star Wars Rankings",
sub = "Perfect score = 10", xlab = "Episode", ylab = "Ranking",
col = "aquamarine1", ylim = c(0,10))
install.packages("mice")
library(mice)
# Connect to database
con <- dbConnect(RMySQL::MySQL(), dbname = 'star_wars', host = 'localhost', port = 3306, user = 'root', password = keyring::key_get("star_wars", "root"))
# Create the query for all data from the ranking table and get the results of the query
sql = "SELECT * FROM rankings"
ranking_table <- dbGetQuery(con, sql)
md.pattern(ranking_table)
install.packages("VIM")
library(VIM)ranking_plot <- aggr(iris.mis, col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(iris.mis), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern"))
library(VIM)
ranking_plot <- aggr(ranking_table, col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(ranking_table), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern")
)
imputed_Data <- mice(ranking_table, m=5, maxit = 50, method = 'pmm', seed = 500)
summary(imputed_Data)
completeData <- complete(imputed_Data,2)
View(completeData)
barplot(completeData, names.arg = 1:9, main = "Star Wars Rankings",
sub = "Perfect score = 10", xlab = "Episode", ylab = "Ranking",
col = "aquamarine1", ylim = c(0,10))
View(completeData)
barplot(completeData$ranking, names.arg = 1:9, main = "Star Wars Rankings",
sub = "Perfect score = 10", xlab = "Episode", ylab = "Ranking",
col = "aquamarine1", ylim = c(0,10))
# Connect to database
con <- dbConnect(RMySQL::MySQL(), dbname = 'star_wars', host = 'localhost', port = 3306, user = 'root', password = keyring::key_get("star_wars", "root"))
# Create the query for all data from the ranking table and get the results of the query
sql = "SELECT * FROM rankings"
ranking_table <- dbGetQuery(con, sql)
# Convert missing ranking data into zeros
ranking_table$ranking[is.na(ranking_table$ranking)] <- 0
sql = "SELECT * FROM movies"
movieid_table <- dbGetQuery(con, sql)
# Get averages
sql = "SELECT movieName, AVG(ranking)
FROM rankings
INNER JOIN movies
ON rankings.movieid = movies.movieid
GROUP BY movieName"
res <- dbGetQuery(con,sql)
names(res) <- c("movieName","ranking")
# Normalize the rankings
res$ranking <- (-1.125 * res$ranking) + 11.125
# Create barplot of rankings
barplot(res$ranking, names.arg = 1:9, main = "Star Wars Rankings",
sub = "Perfect score = 10", xlab = "Episode", ylab = "Ranking",
col = "aquamarine1", ylim = c(0,10))
tapply(completeData$ranking,completeData$movieid,mean)
library(mice)
# Connect to database
con <- dbConnect(RMySQL::MySQL(), dbname = 'star_wars', host = 'localhost', port = 3306, user = 'root', password = keyring::key_get("star_wars", "root"))
# Create the query for all data from the ranking table and get the results of the query
sql = "SELECT * FROM rankings"
ranking_table <- dbGetQuery(con, sql)
imputed_Data <- mice(ranking_table, m=5, maxit = 50, method = 'pmm', seed = 500)
ranking_table <- complete(imputed_Data,2)
# Get averages
averages <- tapply(ranking_table$ranking,ranking_table$movieid,mean)
averages
# Get averages
averages <- data.frame(tapply(ranking_table$ranking,ranking_table$movieid,mean))
View(averages)
# Get averages
averages <- data.frame(1:9,tapply(ranking_table$ranking,ranking_table$movieid,mean))
View(averages)
names(averages) <- c("Movie", "Ranking")
View(averages)
# Normalize the rankings
averages$ranking <- (-1.125 * averages$ranking) + 11.125
library(mice)
# Connect to database
con <- dbConnect(RMySQL::MySQL(), dbname = 'star_wars', host = 'localhost', port = 3306, user = 'root', password = keyring::key_get("star_wars", "root"))
# Create the query for all data from the ranking table and get the results of the query
sql = "SELECT * FROM rankings"
ranking_table <- dbGetQuery(con, sql)
imputed_Data <- mice(ranking_table, m=5, maxit = 50, method = 'pmm', seed = 500)
ranking_table <- complete(imputed_Data,2)
# Get averages
averages <- data.frame(1:9,tapply(ranking_table$ranking,ranking_table$movieid,mean))
names(averages) <- c("episode", "ranking")
# Normalize the rankings
averages$ranking <- (-1.125 * averages$ranking) + 11.125
View(averages)
# Create barplot of rankings
barplot(avergaes$ranking, names.arg = 1:9, main = "Star Wars Rankings",
sub = "Perfect score = 10", xlab = "Episode", ylab = "Ranking",
col = "aquamarine1", ylim = c(0,10))
# Create barplot of rankings
barplot(averages$ranking, names.arg = 1:9, main = "Star Wars Rankings",
sub = "Perfect score = 10", xlab = "Episode", ylab = "Ranking",
col = "aquamarine1", ylim = c(0,10))
library(mice)
# Connect to database
con <- dbConnect(RMySQL::MySQL(), dbname = 'star_wars', host = 'localhost', port = 3306, user = 'root', password = keyring::key_get("star_wars", "root"))
# Create the query for all data from the ranking table and get the results of the query
sql = "SELECT * FROM rankings"
ranking_table <- dbGetQuery(con, sql)
imputed_Data <- mice(ranking_table, m=5, maxit = 50, method = 'pmm', seed = 500)
ranking_table <- complete(imputed_Data,2)
# Get averages
averages <- data.frame(1:9,tapply(ranking_table$ranking,ranking_table$movieid,mean))
names(averages) <- c("episode", "ranking")
# Normalize the rankings
averages$ranking <- (-1.125 * averages$ranking) + 11.125
# Create barplot of rankings
barplot(averages$ranking, names.arg = 1:9, main = "Star Wars Rankings",
sub = "Perfect score = 10", xlab = "Episode", ylab = "Ranking",
col = "aquamarine1", ylim = c(0,10))
library(mice)
library(keyring)
library(DBI)
# Connect to database
con <- dbConnect(RMySQL::MySQL(), dbname = 'star_wars', host = 'localhost', port = 3306, user = 'root', password = keyring::key_get("star_wars", "root"))
# Create the query for all data from the ranking table and get the results of the query
sql = "SELECT * FROM rankings"
ranking_table <- dbGetQuery(con, sql)
imputed_Data <- mice(ranking_table, m=5, maxit = 50, method = 'pmm', seed = 500)
ranking_table <- complete(imputed_Data,2)
# Get averages
averages <- data.frame(1:9,tapply(ranking_table$ranking,ranking_table$movieid,mean))
names(averages) <- c("episode", "ranking")
# Normalize the rankings
averages$ranking <- (-1.125 * averages$ranking) + 11.125
# Create barplot of rankings
barplot(averages$ranking, names.arg = 1:9, main = "Star Wars Rankings",
sub = "Perfect score = 10", xlab = "Episode", ylab = "Ranking",
col = "aquamarine1", ylim = c(0,10))
library(mice)
library(keyring)
library(DBI)
# Connect to database
con <- dbConnect(RMySQL::MySQL(), dbname = 'star_wars', host = 'localhost', port = 3306, user = 'root', password = keyring::key_get("star_wars", "root"))
# Create the query for all data from the ranking table and get the results of the query
sql = "SELECT * FROM rankings"
ranking_table <- dbGetQuery(con, sql)
imputed_Data <- mice(ranking_table, m=5, maxit = 50, method = 'pmm', seed = 500)
ranking_table <- complete(imputed_Data,2)
# Get averages
averages <- data.frame(1:9,tapply(ranking_table$ranking,ranking_table$movieid,mean))
names(averages) <- c("episode", "ranking")
# Normalize the rankings
averages$ranking <- (-1.125 * averages$ranking) + 11.125
# Create barplot of rankings
barplot(averages$ranking, names.arg = 1:9, main = "Star Wars Rankings",
sub = "Perfect score = 10", xlab = "Episode", ylab = "Ranking",
col = "aquamarine1", ylim = c(0,10))
library(mice)
library(keyring)
library(DBI)
# Connect to database
con <- dbConnect(RMySQL::MySQL(), dbname = 'star_wars', host = 'localhost', port = 3306, user = 'root', password = keyring::key_get("star_wars", "root"))
# Create the query for all data from the ranking table and get the results of the query
sql = "SELECT * FROM rankings"
ranking_table <- dbGetQuery(con, sql)
imputed_Data <- mice(ranking_table, m=5, maxit = 50, method = 'pmm', seed = 500)
ranking_table <- complete(imputed_Data,2)
# Get averages
averages <- data.frame(1:9,tapply(ranking_table$ranking,ranking_table$movieid,mean))
names(averages) <- c("episode", "ranking")
# Normalize the rankings
averages$ranking <- (-1.125 * averages$ranking) + 11.125
# Create barplot of rankings
barplot(averages$ranking, names.arg = 1:9, main = "Star Wars Rankings",
sub = "Perfect score = 10", xlab = "Episode", ylab = "Ranking",
col = "aquamarine1", ylim = c(0,10))
lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
library(mice)
library(keyring)
library(DBI)
# Connect to database
con <- dbConnect(RMySQL::MySQL(), dbname = 'star_wars', host = 'localhost', port = 3306, user = 'root', password = keyring::key_get("star_wars", "root"))
# Create the query for all data from the ranking table and get the results of the query
sql = "SELECT * FROM rankings"
ranking_table <- dbGetQuery(con, sql)
imputed_Data <- mice(ranking_table, m=5, maxit = 50, method = 'pmm', seed = 500)
ranking_table <- complete(imputed_Data,2)
# Get averages
averages <- data.frame(1:9,tapply(ranking_table$ranking,ranking_table$movieid,mean))
names(averages) <- c("episode", "ranking")
# Normalize the rankings
averages$ranking <- (-1.125 * averages$ranking) + 11.125
# Create barplot of rankings
barplot(averages$ranking, names.arg = 1:9, main = "Star Wars Rankings",
sub = "Perfect score = 10", xlab = "Episode", ylab = "Ranking",
col = "aquamarine1", ylim = c(0,10))
View(ranking_table)
View(averages)
View(ranking_table)
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
load("more/bdims.RData")
mdims <- subset(bdims, sex == 1)
fdims <- subset(bdims, sex == 0)
fhgtmean <- mean(fdims$hgt)
fhgtsd   <- sd(fdims$hgt)
hist(fdims$hgt, probability = TRUE)
x <- 140:190
y <- dnorm(x = x, mean = fhgtmean, sd = fhgtsd)
lines(x = x, y = y, col = "blue")
qqnorm(fdims$hgt)
qqline(fdims$hgt)
qqline(fdims$hgt)
qqnorm(fdims$hgt)
qqline(fdims$hgt)
sim_norm <- rnorm(n = length(fdims$hgt), mean = fhgtmean, sd = fhgtsd)
qqnorm(sim_norm)
qqline(sim_norm)
qqnormsim(fdims$hgt)
qqnormsim(fdims$wgt)
qqnormsim(fdims$wgt)
qqnormsim(fdims$wgt)
qqnormsim(fdims$wgt)
qqnorm(sim_norm)
qqline(sim_norm)
qqnorm(fdims$hgt)
qqline(fdims$hgt)
qqnorm(sim_norm)
qqline(sim_norm)
qqnorm(sim_norm)
qqline(sim_norm)
qqnorm(fdims$hgt)
qqline(fdims$hgt)
qqnormsim(fdims$wgt)
qqnormsim(fdims$wgt)
hist(fdims$wgt)
qqnormsim(dims$age)
qqnormsim(bdims$age)
qqnormsim(bdims$age)
qqnormsim(fdims$hgt)
qqnormsim(bdims$age)
qqnormsim(fdims$che.de)
qqnormsim(fdims$bii.di)
qqnormsim(fdims$kne.di)
hist(fdims$kne.di)
fwgtmean <- mean(fdims$wgt)
fwgtsd   <- sd(fdims$wgt)
pnorm(q = 152, mean = fhgtmean, sd = fhgtsd)
sum(fdims$hgt > 152) / length(fdims$hgt)
pnorm(q = 100, mean = fwgtmean, sd = fwgtsd)
sum(fdims$wgt > 100) / length(fdims$wgt)
fwgtmean <- mean(fdims$wgt)
fwgtsd   <- sd(fdims$wgt)
pnorm(q = 152, mean = fhgtmean, sd = fhgtsd)
sum(fdims$hgt < 152) / length(fdims$hgt)
pnorm(q = 100, mean = fwgtmean, sd = fwgtsd)
sum(fdims$wgt < 100) / length(fdims$wgt)
a = pnorm(q = 152, mean = fhgtmean, sd = fhgtsd)
b = sum(fdims$hgt < 152) / length(fdims$hgt)
a-b
a=pnorm(q = 100, mean = fwgtmean, sd = fwgtsd)
b=sum(fdims$wgt < 100) / length(fdims$wgt)
a-b
View(fdims)
pnorm(q = 45.3, mean = fwgtmean, sd = fwgtsd)
sum(fdims$wgt < 45.3) / length(fdims$wgt)
a=pnorm(q = 45.3, mean = fwgtmean, sd = fwgtsd)
b=sum(fdims$wgt < 45.3) / length(fdims$wgt)
a-b
sum(fdims$wgt < 52.16) / length(fdims$wgt)
url <- "http://www.r-datacollection.com/materials/html/fortunes.html"
fortunes <- readLines(con = url)
fortunes
library(XML)
parsed_fortunes <- htmlParse(file = url)
print(parsed_fortunes)
library(XML)
html <- htmlParse(file = "books.html")
xml <- xmlParse(file = "books.xml", validate = TRUE)
library(XML)
html <- htmlParse(file = "books.html")
xml <- xmlParse(file = "books.xml", validate = TRUE)
library(XML)
html <- htmlParse(file = "books.html")
xml <- xmlParse(file = "books.xml")
html
html <- htmlParse(file = "books.html")
xml <- xmlParse(file = "books.xml")
library(XML)
html <- htmlParse(file = "books.html")
xml <- xmlParse(file = "books.xml")
html
xml
library(XML)
html <- htmlParse(file = "books.html")
library(xml2)
html <- htmlParse(file = "books.html")
xml <- xmlParse(file = "books.xml")
setwd("~/CUNY/DATA607/Assignments/XML and JSON")
library(XML)
html <- htmlParse(file = "books.html")
xml <- xmlParse(file = "books.xml")
xml <- xmlParse(file = "books.xml", validate = TRUE)
library(XML)
html <- htmlParse(file = "books.html")
xml <- xmlParse(file = "books.xml", validate = TRUE)
library(XML)
html <- htmlParse(file = "books.html")
xml <- xmlParse(file = "books.xml", validate = TRUE)
library(XML)
html <- htmlParse(file = "books.html")
xml <- xmlParse(file = "books.xml")
xml
hmlt
html
setwd("~/CUNY/DATA607/Projects/Project 2")
# load required libraries
library(tidyverse)
library(rvest)
library(ggplot2)
# load the coronavirus csv
cv <- read.csv("coronavirus.csv", header = TRUE, stringsAsFactors = FALSE)
# tidy the data by separating the notes section
for(i in c("critical","serious","recovered")){
cv <- cv %>%
mutate(i = str_extract(notes,str_c("\\d* ", i))) %>%
separate(i, into = c(i, str_c("word", i)), sep = " ")
}
cv <- cv %>%
select(country, cases, deaths, critical, serious, recovered)
# remove NAs and make them 0
# (this is justified since they were created by a lack of accounts)
cv[is.na(cv)] = 0
colnames(cv)[1] <- "region"
# get world map data for coordinates, then join with my data
world_map <- map_data("world")
cv_map <- full_join(cv, world_map, by = "region")
# plot the number of cases in each country
ggplot(cv_map, aes(long, lat, group = group)) +
geom_polygon(aes(fill = cases), color = "black") +
scale_fill_viridis_c(option = "C")
bar_cv <- cv_map %>%
filter(cases > 5) %>%
distinct(region, cases)
ggplot(bar_cv, aes(x = reorder(region, cases), y = cases)) +
geom_bar(stat = "identity") +
labs(x = "Region",
y = "Total Cases") +
coord_flip()
# remove China and Japan from the data to show the spread in other countries
cv_map$cases[cv_map$region == "China"] = NA
cv_map$cases[cv_map$region == "Japan"] = NA
ggplot(cv_map, aes(long, lat, group = group)) +
geom_polygon(aes(fill = cases), color = "black") +
scale_fill_viridis_c(option = "C")
bar_cv <- cv_map %>%
filter(cases > 5) %>%
distinct(region, cases)
ggplot(bar_cv, aes(x = reorder(region, cases), y = cases)) +
geom_bar(stat = "identity") +
labs(x = "Region",
y = "Total Cases") +
coord_flip()
################################################################################
# get some new, more current data
url <- "https://www.worldometers.info/coronavirus/#countries"
new_cv <- read_html(url) %>%
html_nodes("table") %>%
html_table()
# clean this new data. All NAs should be 0 since they occured
#due to there being no reported cases
new_cv <- new_cv[[1]]
new_cv$TotalCases <- str_remove(new_cv$TotalCases,",")
new_cv$TotalDeaths <- str_remove(new_cv$TotalDeaths,",")
new_cv$TotalCases <- as.integer(new_cv$TotalCases)
new_cv$TotalDeaths <- as.integer(new_cv$TotalDeaths)
new_cv[is.na(new_cv)] = 0
# right join with world map to get rid of data points that don't have coordinates
# create the death rate variable
colnames(new_cv)[1] <- "region"
new_cv <- right_join(new_cv, world_map, by = "region")
new_cv <- new_cv %>%
mutate("death_rate" = round((TotalDeaths/TotalCases)*100, digits = 2))
# plot this new data
ggplot(new_cv, aes(long, lat, group = group)) +
geom_polygon(aes(fill = TotalCases), color = "black") +
scale_fill_viridis_c(option = "C")
bar_cv <- new_cv %>%
filter(TotalCases > 20) %>%
distinct(region, TotalCases)
ggplot(bar_cv, aes(x = reorder(region, TotalCases), y = TotalCases)) +
geom_bar(stat = "identity") +
labs(x = "Region",
y = "Total Cases") +
coord_flip()
# look at death rate
rate <- new_cv %>%
filter(region != "Philippines")
ggplot(rate, aes(long, lat, group = group)) +
geom_polygon(aes(fill = death_rate), color = "black") +
scale_fill_viridis_c(option = "C")
# remove China again and plot
new_cv$TotalCases[new_cv$region == "China"] = NA
ggplot(new_cv, aes(long, lat, group = group)) +
geom_polygon(aes(fill = TotalCases), color = "black") +
scale_fill_viridis_c(option = "C")
bar_cv <- new_cv %>%
filter(TotalCases > 20) %>%
distinct(region, TotalCases)
ggplot(bar_cv, aes(x = reorder(region, TotalCases), y = TotalCases)) +
geom_bar(stat = "identity") +
labs(x = "Region",
y = "Total Cases") +
coord_flip()
# remove Italy and Iran and plot
new_cv$TotalCases[new_cv$region == "Italy"] = NA
new_cv$TotalCases[new_cv$region == "Iran"] = NA
ggplot(new_cv, aes(long, lat, group = group)) +
geom_polygon(aes(fill = TotalCases), color = "black") +
scale_fill_viridis_c(option = "C")
bar_cv <- new_cv %>%
filter(TotalCases > 20) %>%
distinct(region, TotalCases)
ggplot(bar_cv, aes(x = reorder(region, TotalCases), y = TotalCases)) +
geom_bar(stat = "identity") +
labs(x = "Region",
y = "Total Cases") +
coord_flip()
new_cv
url <- "https://www.worldometers.info/coronavirus/#countries"
new_cv <- read_html(url) %>%
html_nodes("table") %>%
html_table()
setwd("~/CUNY/DATA607/Assignments/XML and JSON")
library(XML)
html <- htmlParse(file = "books.html")
xml <- xmlParse(file = "books.xml")
class(xml)
class(xml)
root <- xmlRoot(xml)
class(root)
root[[1]]
root[[2]]
root[[2]][1]
root[[2]][[1]]
root[[2]][[2]]
root[name]
root[title]
root["title"]
root[["title"]]
root["book"]
root[["book"]][["title"]]
xml <- xmlRoot(xml)
xml <- xmlToDataFrame(xml)
View(xml)
library(XML)
html <- htmlParse(file = "books.html")
xml <- xmlParse(file = "books.xml")
xml <- xmlRoot(xml)
xml <- xmlToDataFrame(xml)
View(xml)
library(XML)
html <- htmlParse(file = "books.html")
xml <- xmlParse(file = "books.xml")
xml <- xmlRoot(xml)
xml <- xmlToDataFrame(xml)
View(xml)
View(xml)
